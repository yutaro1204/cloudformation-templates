AWSTemplateFormatVersion: 2010-09-09
Description: "Cloud Falcon Portal"
Mappings: {}
Parameters:
  apiKey:
    Type: String
  crmIp:
    Type: String
  env:
    Default : 'japanese'
    Type: String
  servicePrefix:
    Type: String
  restApiId:
    Default: 'restApiId'
    Type: String
Outputs:
  PortalLambdaRole:
    Description: PortalLambdaRole information
    Value: !GetAtt 
      - PortalLambdaRole
      - Arn
    Export:
      Name: !Sub 'PortalLambdaRoleARN-${env}'
  LambdaDeployUser:
    Description: LambdaDeployUser information
    Value: !GetAtt 
      - LambdaDeployUser
      - Arn
    Export:
      Name: !Sub 'LambdaDeployUserARN-${env}'
  LambdaDeployUserAccessKey:
    Description: AccessKey Lambda Function Deploy
    Value: !Ref LambdaDeployUserAccessKey
    Export:
      Name: !Sub 'LambdaDeployUserAccessKey-${env}'
  LambdaDeployUserSecretKey:
    Description: AccessKey LambdaFunction Deploy
    Value: !GetAtt
      - LambdaDeployUserAccessKey
      - SecretAccessKey
    Export:
      Name: !Sub 'LambdaDeployUserSecretKey-${env}'
  S3BatchSourceBucket:
    Description: This value for set BatchEC2.template parameter.
    Value: !Ref S3BatchSourceBucket
    Export:
      Name: !Sub 'S3BatchSourceBucket-${env}'
  PortalFrontBuildBucket:
    Description: The S3 bucket for built front-end source codes
    Value: !Ref S3WebBucket
    Export:
      Name: !Sub '${servicePrefix}-portal-web-${env}'
Conditions:
  SetSwaggerHost: !Equals [!Sub '${restApiId}', 'restApiId']
Resources:
  LambdaDeployUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
      UserName: !Sub '${servicePrefix}-LambdaDeployUser-${env}'
  LambdaDeployUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Sub '${servicePrefix}-LambdaDeployUser-${env}'
    DependsOn:
      - LambdaDeployUser
  PortalLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonEC2FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchFullAccess'
      RoleName: !Sub '${servicePrefix}-PortalLambdaRole-${env}'
  SiemAPIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: SiemAPI
    Properties:
      RestApiId: !Ref SiemAPI
      StageName: !Sub 'Dummy-${env}'
  SiemAPIStage:
    Type: 'AWS::ApiGateway::Stage'
    DependsOn: SiemAPI
    Properties:
      RestApiId: !Ref SiemAPI
      DeploymentId: !Ref SiemAPIDeployment
      StageName: !Sub '${servicePrefix}-${env}'
      Variables:
        apiKey: !Sub '${apiKey}'
        apiServerURL: !Sub 'http://${crmIp}'
        webserviceURL: !Sub 'http://${crmIp}/webservice.php'
        env: !Sub '${env}'
        swaggerTitle: !Sub '${servicePrefix}-Dev'
        restApiId: !Sub '${restApiId}'
        swaggerBasePath: !Sub '/${servicePrefix}-prod'
  S3ResourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${servicePrefix}-portal-resource-${env}'
  S3WebBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${servicePrefix}-portal-web-${env}'
  S3WebBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3WebBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3WebBucket}/*'
            Principal:
              CanonicalUser: !GetAtt 
                - CloudFrontOriginAccessIdentity
                - S3CanonicalUserId
    DependsOn:
      - CloudFrontOriginAccessIdentity
      - S3WebBucket
  S3BatchSourceBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${servicePrefix}-batch-source'
  S3BucketLogDownload:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${servicePrefix}-logdownload'
      LifecycleConfiguration:
        Rules:
          - Id: !Sub '${servicePrefix}-logdownloadRule'
            Status: Enabled
            ExpirationInDays: '31'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: '3000'
  WebACL:
    Type: 'AWS::WAF::WebACL'
    Properties:
      Name: !Sub '${servicePrefix}-WebACL-${env} for CloudFront'
      DefaultAction:
        Type: BLOCK
      MetricName: WebACL
  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref 'AWS::StackName'
    DependsOn: []
  apiDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_200
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 400
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
        DefaultCacheBehavior:
          TargetOriginId: apiOrigin
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - HEAD
            - GET
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Origin
            Cookies:
              Forward: all
        HttpVersion: http2
        WebACLId: !Ref WebACL
        Origins:
          - DomainName: !Join 
              - ''
              - - !Ref SiemAPI
                - .execute-api.
                - !Ref 'AWS::Region'
                - .amazonaws.com
            Id: apiOrigin
            CustomOriginConfig:
              HTTPSPort: '443'
              OriginProtocolPolicy: match-viewer
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            OriginPath: !Sub '/${servicePrefix}-${env}'
        Restrictions:
          GeoRestriction:
            RestrictionType: none
            Locations: []
        ViewerCertificate:
          CloudFrontDefaultCertificate: 'true'
    DependsOn:
      - SiemAPIDeployment
  webDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        PriceClass: PriceClass_200
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: '200'
            ResponsePagePath: /index.html
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: '200'
            ResponsePagePath: /index.html
        DefaultCacheBehavior:
          TargetOriginId: webOrigin
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          CachedMethods:
            - HEAD
            - GET
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Origin
            Cookies:
              Forward: all
        HttpVersion: http2
        WebACLId: !Ref WebACL
        Origins:
          - DomainName: !Join 
              - ''
              - - !Ref S3WebBucket
                - .s3.amazonaws.com
            Id: webOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Restrictions:
          GeoRestriction:
            RestrictionType: none
            Locations: []
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.1_2016
          CloudFrontDefaultCertificate: 'true'
    DependsOn:
      - S3WebBucket
  tablePortalDevelopmentBatch:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalBatch'
      AttributeDefinitions:
        - AttributeName: timeRange
          AttributeType: S
      KeySchema:
        - AttributeName: timeRange
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentBatchFileInfo:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalBatchFileInfo'
      AttributeDefinitions:
        - AttributeName: timeRange
          AttributeType: S
      KeySchema:
        - AttributeName: timeRange
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentDashboard:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalDashboard'
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      Tags:
        - Key: 'backup'
          Value: 'daily'
  tablePortalDevelopmentLoginFailed:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalLoginFailed'
      TimeToLiveSpecification:
        AttributeName: ExpiredAt
        Enabled: true
      AttributeDefinitions:
        - AttributeName: LoginId
          AttributeType: S
      KeySchema:
        - AttributeName: LoginId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentSessions:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalSessions'
      TimeToLiveSpecification:
        AttributeName: ExpiredAt
        Enabled: true
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentSubscribe:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalSubscribe'
      TimeToLiveSpecification:
        AttributeName: ExpiredAt
        Enabled: true
      AttributeDefinitions:
        - AttributeName: Token
          AttributeType: S
      KeySchema:
        - AttributeName: Token
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentSubscribeCount:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalSubscribeCount'
      TimeToLiveSpecification:
        AttributeName: ExpiredAt
        Enabled: true
      AttributeDefinitions:
        - AttributeName: IP
          AttributeType: S
      KeySchema:
        - AttributeName: IP
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  tablePortalDevelopmentUsers:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalUsers'
      AttributeDefinitions:
        - AttributeName: LoginId
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      GlobalSecondaryIndexes:
        - IndexName: LoginId-index
          KeySchema:
            - AttributeName: LoginId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '5'
      Tags:
        - Key: 'backup'
          Value: 'daily'
  tablePortalProxyLoginSession:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${servicePrefix}-PortalProxyLoginSession"
      AttributeDefinitions:
        - AttributeName: PhpSessionId
          AttributeType: S
      KeySchema:
        - AttributeName: PhpSessionId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
  tableLoginAudit:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub '${servicePrefix}-PortalLoginAudit'
      AttributeDefinitions:
        - AttributeName: PortalId
          AttributeType: S
        - AttributeName: ExecutedAt
          AttributeType: S
      KeySchema:
        - AttributeName: PortalId
          KeyType: HASH 
        - AttributeName: ExecutedAt
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ExpiredAt
        Enabled: true
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption key for daily"
      EnableKeyRotation: True
      Enabled: True
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              "AWS":
                {
                  "Fn::Sub": "arn:${AWS::Partition}:iam::${AWS::AccountId}:root",
                }
            Action:
              - kms:*
            Resource: "*"

  BackupVaultWithDailyBackups:
    Type: "AWS::Backup::BackupVault"
    Properties:
      BackupVaultName: "BackupVaultWithDailyBackups"
      EncryptionKeyArn: !GetAtt KMSKey.Arn

  BackupPlanWithDailyBackups:
    Type: "AWS::Backup::BackupPlan"
    Properties:
      BackupPlan:
        BackupPlanName: "BackupPlanWithDailyBackups"
        BackupPlanRule:
          - RuleName: "RuleForDailyBackups"
            TargetBackupVault: !Ref BackupVaultWithDailyBackups
            ScheduleExpression: "cron(0 5 ? * * *)"
            Lifecycle:
              DeleteAfterDays: 7
    DependsOn: BackupVaultWithDailyBackups

  BackupRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "backup.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup'
        - 'arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores'

  TagBasedBackupSelection:
    Type: "AWS::Backup::BackupSelection"
    Properties:
      BackupSelection:
        SelectionName: "TagBasedBackupSelection"
        IamRoleArn: !GetAtt BackupRole.Arn
        ListOfTags:
          - ConditionType: "STRINGEQUALS"
            ConditionKey: "backup"
            ConditionValue: "daily"
      BackupPlanId: !Ref BackupPlanWithDailyBackups
    DependsOn: BackupPlanWithDailyBackups

  SiemAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${servicePrefix}-${env}'
      Body:
        swagger: "2.0"
        info:
          version: "0.5.0"
          title: "${!stageVariables.swaggerTitle}"
        host: !If [SetSwaggerHost, "", "${!stageVariables.restApiId}.execute-api.${AWS::Region}.amazonaws.com"]
        basePath: "${!stageVariables.swaggerBasePath}"
        schemes:
        - "https"
        paths:
          /agreement:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Agreement"
                required: true
                schema:
                  $ref: "#/definitions/Agreement"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:agreementPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n  \"stage\": {\n    #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  },\n  \"hasNoSla\": $json.hasNoSla\n\
                    }\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /analyses:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "fromUpdatedAt"
                in: "query"
                required: false
                type: "string"
              - name: "toUpdatedAt"
                in: "query"
                required: false
                type: "string"
              - name: "alertsThreshold"
                in: "query"
                required: false
                type: "string"
              - name: "ascUploadedAt"
                in: "query"
                required: false
                type: "string"
              - name: "successOnly"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:analysesGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"page\"\
                    : \"$input.params('page')\",\n  \"limit\": \"$input.params('limit')\"\
                    ,\n  \"order\": \"$input.params('order')\",\n  \"fromUploadedAt\": \"\
                    $input.params('fromUploadedAt')\",\n  \"toUploadedAt\": \"$input.params('toUploadedAt')\"\
                    ,\n  \"alertsThreshold\": \"$input.params('alertsThreshold')\",\n  \"\
                    successOnly\": \"$input.params('successOnly')\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /analyses/report:
            get:
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:analysesReportGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /analyses/upload:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:analysesUploadPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    \ : \"$context.authorizer.principalId\",\n  \"stage\": {\n        #foreach($key\
                    \ in $stageVariables.keySet())\n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"deviceTypeName\"\
                    \ : \"$json.deviceTypeName\",\n  \"fileSize\" : $json.fileSize,\n  \"\
                    fileName\" : \"$json.fileName\",\n  \"checkSum\" : \"$json.checkSum\"\
                    ,\n  \"comment\" : \"$json.comment.replaceAll(\"\\n\",\"\\\\n\")\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /analyses/{analysisId}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "analysisId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:analysesAnalysisIdGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"analysisId\"\
                    : \"$input.params('analysisId')\",\n  \"page\": \"$input.params('page')\"\
                    ,\n  \"limit\": \"$input.params('limit')\",\n  \"order\": \"$input.params('order')\"\
                    ,\n  \"sort\": \"$input.params('sort')\",\n  \"fromDetectedAt\": \"$input.params('fromDetectedAt')\"\
                    ,\n  \"toDetectedAt\": \"$input.params('toDetectedAt')\",\n  \"severity\"\
                    : \"$input.params('severity')\",\n  \"keyword\": \"$input.params('keyword')\"\
                    \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "analysisId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /announcements:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "limit"
                in: "query"
                required: false
                type: "string"
              - name: "sort"
                in: "query"
                required: false
                type: "string"
              - name: "page"
                in: "query"
                required: false
                type: "string"
              - name: "asc"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:announcements:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n    \"page\": \"$input.params('page')\",\r\n\t\"limit\": \"$input.params('limit')\"\
                    ,\r\n\t\"order\": \"$input.params('order')\",\r\n\t\"sort\": \"$input.params('sort')\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /announcements/{announcementId}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "announcementId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:announcementId:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n    \"announcementId\": \"$input.params('announcementId')\"\r\n}\r\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "announcementId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /dashboard/widgets:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "isMobile"
                in: "query"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dashboardWidgetsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n    \"status\" : $errorObj.status,\n    \"message\" : \"$errorObj.message\"\
                        \n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n    \"status\" : $errorObj.status,\n    \"message\" : \"$errorObj.message\"\
                        \n}"
                requestTemplates:
                  application/json: "{\n    \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
                    principalId\": \"$context.authorizer.principalId\",\n    \"isMobile\"\
                    : \"$input.params('isMobile')\" \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dashboardWidgetsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n    \"status\" : $errorObj.status,\n    \"message\" : \"$errorObj.message\"\
                        \n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n    \"status\" : $errorObj.status,\n    \"message\" : \"$errorObj.message\"\
                        \n}"
                requestTemplates:
                  application/json: "{\n    \"principalId\": \"$context.authorizer.principalId\"\
                    ,\n    \"isMobile\": $input.json('$.isMobile'),\n    \"widgets\": $input.json('$.widgets')\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /dashboard/widgets/addingRule:
            get:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:dashboardWidgetsAddingRuleGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    \ : \"$context.authorizer.principalId\",\n  \"stage\": {\n    #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /faq:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "keyword"
                in: "query"
                required: false
                type: "string"
              - name: "category"
                in: "query"
                required: false
                type: "string"
              - name: "limit"
                in: "query"
                required: false
                type: "string"
              - name: "page"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:faqsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"page\"\
                    : \"$input.params('page')\",\n  \"limit\": \"$input.params('limit')\"\
                    ,\n  \"keyword\": \"$input.params('keyword')\",\n  \"category\": \"$input.params('category')\"\
                    \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /faq/categories:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:faqCategories:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    }\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /faq/{faqId}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "faqId"
                in: "path"
                required: true
                type: "string"
              - name: "faq_no"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:faqIdGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\r\n  \"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n  \"faqId\": \"$input.params('faqId')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "faqId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /generateKey:
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:generateKey:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                          \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                          $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                          \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                          $errorObj.message\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                      : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t  #foreach($key\
                      \ in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                      \n      #if($foreach.hasNext),#end\n      #end\n  },\n  \"phpSessionId\"\
                      : \"$json.phpSessionId\",\n  \"sourceIp\" : \"$input.params().header.get('X-Forwarded-For').split(',')[0]\"\
                      \n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
                - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:generateKey:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                          \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /justConsole:
            x-amazon-apigateway-any-method:
              responses:
                200:
                  description: "200 response"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:justConsole:${!stageVariables.env}/invocations"
                responses:
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  .*:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /logdownload:
            get:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:logDownloadList:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $!stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($!stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /logdownload/url:
            get:
              consumes:
              - "application/json"
              parameters:
              - name: "targetDate"
                in: "query"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "�{���A�N�G��������p�����[�^�A����уw�b�_�[�̌���"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:logDownloadUrl:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $!stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($!stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"targetDate\"\
                    : \"$input.params('targetDate')\"\n}"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
          /login:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Login"
                required: true
                schema:
                  $ref: "#/definitions/Login"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:login:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n  \"stage\": {\n    #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  },\n  \"loginId\": \"\
                    $json.loginId\",\n  \"password\": \"$json.password\",\n  \"token\": \"\
                    $json.token\",\n  \"session\": \"$json.session\",\n  \"sourceIp\" : \"\
                    $input.params().header.get('X-Forwarded-For').split(',')[0]\"\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n    \"statusCode\": 200\n}"
                passthroughBehavior: "never"
                type: "mock"
          /logout:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:logout:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"statusCode\": 200\n}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /partner:
            get:
              consumes:
                - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
                - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getPartnerManage:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                      ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                      \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                      \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
                - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /password/reset:
            post:
              consumes:
              - "application/json"
              parameters:
              - in: "body"
                name: "PasswordReset"
                required: true
                schema:
                  $ref: "#/definitions/PasswordReset"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    X-FRAME-OPTIONS:
                      type: "string"
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:passwordResetPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"stage\"\
                    : {\n    #foreach($key in $stageVariables.keySet())\n    \"$key\" : \"\
                    $util.escapeJavaScript($stageVariables.get($key))\" \n    #if($foreach.hasNext),#end\n\
                    \    #end\n  },\n  \"loginId\": \"$json.loginId\",\n  \"token\": \"$json.token\"\
                    \ \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /plan:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                500:
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:plan:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n  \"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n  \"stage\": {\r\n    #foreach($key in $stageVariables.keySet())\r\
                    \n      \"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n      #if($foreach.hasNext),#end\r\n    #end\r\n  }\r\n}"
                passthroughBehavior: "never"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Cache-Control:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'no-store'"
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    }\r\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/accounts:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Cache-Control:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileAccountsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'no-store'"
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    }\r\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "ProfileAccounts"
                required: true
                schema:
                  $ref: "#/definitions/ProfileAccounts"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileAccountsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n\t\
                    \"principalId\": \"$context.authorizer.principalId\",\r\n\t\"stage\":\
                    \ {\r\n\t    #foreach($key in $stageVariables.keySet())\r\n          \
                    \  \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n\
                    \            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\n\
                    \    \"loginId\": \"$json.loginId\",\r\n    \"password\": \"$json.password\"\
                    ,\r\n    \"isTotpEnabled\": $json.isTotpEnabled\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    custom-header:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/accounts/{userId}:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                type: "string"
              - in: "body"
                name: "ProfileAccounts"
                required: true
                schema:
                  $ref: "#/definitions/ProfileAccounts"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileAccountsIdPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n\t\
                    \"principalId\": \"$context.authorizer.principalId\",\r\n\t\"stage\":\
                    \ {\r\n\t    #foreach($key in $stageVariables.keySet())\r\n          \
                    \  \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n\
                    \            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\n\t\
                    \"userId\": \"$input.params('userId')\",\r\n\t\"loginId\": \"$json.loginId\"\
                    ,\r\n    \"password\": \"$json.password\",\r\n    \"isTotpEnabled\": $json.isTotpEnabled\r\
                    \n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Header:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileAccountsDelete:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Header: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n    \"userId\": \"$input.params('userId')\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "userId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/contracts:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Cache-Control:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileContractsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'no-store'"
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    }\r\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Profile"
                required: true
                schema:
                  $ref: "#/definitions/Profile"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileContractsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n\t\
                    \"principalId\": \"$context.authorizer.principalId\",\r\n\t\"stage\":\
                    \ {\r\n\t    #foreach($key in $stageVariables.keySet())\r\n          \
                    \  \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n\
                    \            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\n\t\
                    \"contractorName\": \"$json.contractorName\",\r\n\t\"contractorNameKana\"\
                    : \"$json.contractorNameKana\",\r\n\t\"firstName\": \"$json.firstName\"\
                    ,\r\n\t\"firstNameKana\": \"$json.firstNameKana\",\r\n\t\"familyName\"\
                    : \"$json.familyName\",\r\n\t\"familyNameKana\": \"$json.familyNameKana\"\
                    ,\r\n\t\"department\": \"$json.department\",\r\n\t\"tellNumber\": \"$json.tellNumber\"\
                    ,\r\n\t\"e-mail\": \"$json.e-mail\",\r\n\t\"zipcode\": \"$json.zipcode\"\
                    ,\r\n\t\"address\": \"$json.address.replaceAll(\"\\n\",\"\\\\n\")\",\r\
                    \n\t\"building\": \"$json.building\"\r\n}\r\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/internal-ips:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:internalIpsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    }\r\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "InternalIPs"
                required: true
                schema:
                  $ref: "#/definitions/InternalIPs"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:internalIpsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n\t\"principalId\"\
                    : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t    #foreach($key\
                    \ in $stageVariables.keySet())\n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n    \"\
                    ipString\": \"$json.ipString\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/notification:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:notificationGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    }\r\n\
                    }"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Notification"
                required: true
                schema:
                  $ref: "#/definitions/Notification"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:notificationPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n\t\"principalId\"\
                    : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t  #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\": \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  },\n  \"sensor\": {\n\
                    \    \"severity\": {\n      \"enabled\": $json.sensor.severity.enabled,\n\
                    \      \"threshold\": $json.sensor.severity.threshold\n    },\n    \"\
                    logs\": [\n      {\n        \"enabled\": $json.sensor.logs[0].enabled,\n\
                    \        \"threshold\": $json.sensor.logs[0].threshold\n      },\n   \
                    \   {\n        \"enabled\": $json.sensor.logs[1].enabled,\n        \"\
                    threshold\": $json.sensor.logs[1].threshold\n      }\n    ],\n    \"daily\"\
                    : {\n      \"enabled\": $json.sensor.daily.enabled\n    }\n  },\n  \"\
                    analysis\": {\n    \"isAnalysisFinished\": $json.analysis.isAnalysisFinished\n\
                    \  },\n  \"common\": {\n    \"isTicketUpdated\": $json.common.isTicketUpdated\n\
                    \  },\n  \"emails\": [\n  \t  #foreach($email in $json.emails)\n  \t \
                    \   \"$email\"\n      #if($foreach.hasNext),#end\n    #end\n    ]\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/password:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "ProfilePassword"
                required: true
                schema:
                  $ref: "#/definitions/ProfilePassword"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profilePassword:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  403:
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n\t\"principalId\"\
                    : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t  #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  },\n\t\"newPassword\"\
                    : \"$json.newPassword\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/service/leave:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServiceLeavePost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"status\" : $errorObj.status,\r\n  \"message\" : \"$errorObj.message\"\
                        \r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"status\" : $errorObj.status,\r\n  \"message\" : \"$errorObj.message\"\
                        \r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n  \"status\" : $errorObj.status,\r\n  \"message\" : \"$errorObj.message\"\
                        \r\n}"
                requestTemplates:
                  application/json: "{\r\n  \"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n  \"stage\": {\r\n    #foreach($key in $stageVariables.keySet())\r\
                    \n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n      #if($foreach.hasNext),#end\r\n    #end\r\n  }\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/service/plan:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServicePlanGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                requestTemplates:
                  application/json: "{\n  \"principalId\": \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n    #foreach($key in $stageVariables.keySet())\n  \
                    \    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n\
                    \      #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "ProfileServicePlan"
                required: true
                schema:
                  $ref: "#/definitions/ProfileServicePlan"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServicePlanPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n  \"planId\": \"$json.planId\"\
                    ,\n  \"stage\": {\n    #foreach($key in $stageVariables.keySet())\n  \
                    \    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n\
                    \      #if($foreach.hasNext),#end\n    #end\n  }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/service/sensors:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Allow-Control-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServiceSensorsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                requestTemplates:
                  application/json: "{\n  \"principalId\": \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n    #foreach($key in $stageVariables.keySet())\n  \
                    \    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n\
                    \      #if($foreach.hasNext),#end\n    #end\n  }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "ProfileServiceSensors"
                required: true
                schema:
                  $ref: "#/definitions/ProfileServiceSensors"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServiceSensorsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n  \"deviceTypeId\": \"$json.deviceTypeId\"\
                    ,\n  \"deviceSerialIdentifier\": \"$json.deviceSerialIdentifier\",\n \
                    \ \"deviceDisplayName\": \"$json.deviceDisplayName\",\n  \"stage\": {\n\
                    \    #foreach($key in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  }\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /profile/service/sensors/{deviceId}:
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "deviceId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:profileServiceSensorsDeviceIdDelete:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\n\
                        {\n  \"status\" : $errorObj.status,\n  \"message\" : \"$errorObj.message\"\
                        \n}\n"
                requestTemplates:
                  application/json: "{\n  \"principalId\": \"$context.authorizer.principalId\"\
                    ,\n  \"deviceId\": \"$input.params('deviceId')\",\n  \"stage\": {\n  \
                    \  #foreach($key in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "deviceId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/alerts:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "keyword"
                in: "query"
                required: false
                type: "string"
              - name: "sensor"
                in: "query"
                required: false
                type: "string"
              - name: "limit"
                in: "query"
                required: false
                type: "string"
              - name: "sort"
                in: "query"
                required: false
                type: "string"
              - name: "severity"
                in: "query"
                required: false
                type: "string"
              - name: "detail"
                in: "query"
                required: false
                type: "string"
              - name: "status"
                in: "query"
                required: false
                type: "string"
              - name: "toDetectedAt"
                in: "query"
                required: false
                type: "string"
              - name: "page"
                in: "query"
                required: false
                type: "string"
              - name: "asc"
                in: "query"
                required: false
                type: "string"
              - name: "fromDetectedAt"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:alertsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"page\": \"$input.params('page')\",\r\n\t\"limit\": \"$input.params('limit')\"\
                    ,\r\n\t\"order\": \"$input.params('order')\",\r\n\t\"sort\": \"$input.params('sort')\"\
                    ,\r\n    \"fromDetectedAt\": \"$input.params('fromDetectedAt')\",\r\n\
                    \    \"toDetectedAt\": \"$input.params('toDetectedAt')\",\r\n    \"severity\"\
                    : \"$input.params('severity')\",\r\n    \"sensor\": \"$input.params('sensor')\"\
                    ,\r\n    \"keyword\": \"$input.params('keyword')\",\r\n    \"detail\"\
                    : \"$input.params('detail')\",\r\n    \"status\": \"$input.params('status')\"\
                    \r\n}\r\n"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/alerts/{alertId}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "alertId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                404:
                  description: "404 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:alertIdGet:${!stageVariables.env}/invocations"
                responses:
                  '.*"status" *: *404.*':
                    statusCode: "404"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"alertId\": \"$input.params('alertId')\"\r\n}\r\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "alertId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sensorAlertsDetailPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t  #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n      #end\n  },\n  \"status\": \"\
                    $json.status\",\n  \"alertId\": \"$input.params('alertId')\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "alertId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/devices:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:sensorDevicesGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    : \"$context.authorizer.principalId\",\n\t\"stage\": {\n\t  #foreach($key\
                    \ in $stageVariables.keySet())\n      \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n      #if($foreach.hasNext),#end\n    #end\n  }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/report:
            get:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                500:
                  description: "500 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:reportListGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  .*Task timed out after.*:
                    statusCode: "500"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    }\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/report/downloadcsv:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "type"
                in: "query"
                required: true
                type: "string"
              - name: "targetDate"
                in: "query"
                required: true
                type: "string"
              - in: "body"
                name: "TotpAuth"
                required: true
                schema:
                  $ref: "#/definitions/TotpAuth"
              responses:
                200:
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/ProfileServicePlan"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Content-disposition:
                      type: "string"
                    Content-Type:
                      type: "string"
                400:
                  description: "400 response"
                500:
                  description: "500 response"
                401:
                  description: "401 response"
                403:
                  description: "403 response"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "�N�G��������p�����[�^����уw�b�_�[�̌���"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:downloadCSV:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /sensor/report/downloadpdf:
            get:
              consumes:
              - "application/json"
              parameters:
              - name: "type"
                in: "query"
                required: true
                type: "string"
              - name: "id"
                in: "query"
                required: false
                type: "string"
              - name: "targetDate"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                500:
                  description: "500 response"
                401:
                  description: "401 response"
                403:
                  description: "403 response"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "�N�G��������p�����[�^����уw�b�_�[�̌���"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:reportPdfDownloadGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                  .*Task timed out after.*:
                    statusCode: "500"
                requestTemplates:
                  application/json: "{\n  \"principalId\" : \"$context.authorizer.principalId\"\
                    ,\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n    },\n  \"type\"\
                    : \"$input.params('type')\",\n  \"targetDate\": \"$input.params('targetDate')\"\
                    ,\n  \"id\": \"$input.params('id')\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /signup:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "token"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:signupGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\n  \"stage\": {\n        #foreach($key in $stageVariables.keySet())\n\
                    \            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n  },\n  \"token\"\
                    : \"$input.params('token')\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Signup"
                required: true
                schema:
                  $ref: "#/definitions/Signup"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:signupPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n \
                    \ \"principalId\": \"$context.authorizer.principalId\",\r\n  \"stage\"\
                    : {\r\n    #foreach($key in $stageVariables.keySet())\r\n      \"$key\"\
                    \ : \"$util.escapeJavaScript($stageVariables.get($key))\"\r\n      #if($foreach.hasNext),#end\r\
                    \n    #end\r\n  },\r\n  \"token\": \"$json.token\",\r\n  \"profile\":\
                    \ {\r\n    \"contractorName\": \"$json.contractorName\",\r\n    \"contractorNameKana\"\
                    : \"$json.contractorNameKana\",\r\n    \"firstName\": \"$json.firstName\"\
                    ,\r\n    \"firstNameKana\": \"$json.firstNameKana\",\r\n    \"familyName\"\
                    : \"$json.familyName\",\r\n    \"familyNameKana\": \"$json.familyNameKana\"\
                    ,\r\n    \"department\": \"$json.department\",\r\n    \"tellNumber\":\
                    \ \"$json.tellNumber\",\r\n    \"zipcode\": \"$json.zipcode\",\r\n   \
                    \ \"address\": \"$json.address\",\r\n    \"building\": \"$json.building\"\
                    ,\r\n    \"planId\": \"$json.planId\",\r\n    \"partner\": \"$json.partner\"\
                    ,\r\n    \"preferredDate\": \"$json.preferredDate\",\r\n    \"reservedfield01\"\
                    : \"$json.reservedfield01\",\r\n    \"reservedfield02\": \"$json.reservedfield02\"\
                    ,\r\n    \"reservedfield03\": \"$json.reservedfield03\",\r\n    \"reservedfield04\"\
                    : \"$json.reservedfield04\",\r\n    \"reservedfield05\": \"$json.reservedfield05\"\
                    ,\r\n    \"reservedfield06\": \"$json.reservedfield06\",\r\n    \"reservedfield07\"\
                    : \"$json.reservedfield07\",\r\n    \"reservedfield08\": \"$json.reservedfield08\"\
                    ,\r\n    \"reservedfield09\": \"$json.reservedfield09\",\r\n    \"reservedfield10\"\
                    : \"$json.reservedfield10\"\r\n  }\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /subscribe:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "Subscribe"
                required: true
                schema:
                  $ref: "#/definitions/Subscribe"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:subscribePost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "$input.json('$')"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"stage\"\
                    : {\n    #foreach($key in $stageVariables.keySet())\n      \"$key\" :\
                    \ \"$util.escapeJavaScript($stageVariables.get($key))\"\n      #if($foreach.hasNext),#end\n\
                    \    #end\n  },\n  \"sourceIp\": \"$context.identity.sourceIp\",\n  \"\
                    isTrial\": $json.isTrial,\n  \"email\": \"$json.e-mail\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /tickets:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "limit"
                in: "query"
                required: false
                type: "string"
              - name: "fromUpdatedAt"
                in: "query"
                required: false
                type: "string"
              - name: "sort"
                in: "query"
                required: false
                type: "string"
              - name: "subject"
                in: "query"
                required: false
                type: "string"
              - name: "status"
                in: "query"
                required: false
                type: "string"
              - name: "page"
                in: "query"
                required: false
                type: "string"
              - name: "toUpdatedAt"
                in: "query"
                required: false
                type: "string"
              - name: "asc"
                in: "query"
                required: false
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ticketsGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"page\": \"$input.params('page')\",\r\n\t\"limit\": \"$input.params('limit')\"\
                    ,\r\n\t\"order\": \"$input.params('order')\",\r\n\t\"sort\": \"$input.params('sort')\"\
                    ,\r\n    \"fromUpdatedAt\": \"$input.params('fromUpdatedAt')\",\r\n  \
                    \  \"toUpdatedAt\": \"$input.params('toUpdatedAt')\",\r\n    \"keyword\"\
                    : \"$input.params('keyword')\",\r\n    \"status\": \"$input.params('status')\"\
                    \r\n}\r\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "subject"
                in: "query"
                required: false
                type: "string"
              - name: "comment"
                in: "query"
                required: false
                type: "string"
              - name: "analysisId"
                in: "query"
                required: false
                type: "string"
              - in: "body"
                name: "Tickets"
                required: true
                schema:
                  $ref: "#/definitions/Tickets"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ticketsPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n \
                    \   \r\n\t\"principalId\": \"$context.authorizer.principalId\",\r\n\t\"\
                    stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\n   \
                    \         \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"subject\": \"$json.subject\",\r\n\t\"comment\": \"$json.comment\"\
                    ,\r\n\t\"alertId\": \"$json.alertId\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /tickets/{ticketId}:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "ticketId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ticketIdGet:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    ,\r\n\t\"stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\
                    \n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"ticketId\": \"$input.params('ticketId')\"\r\n}\r\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "ticketId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ticketIdPost:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\r\n{\r\n \
                    \   \r\n\t\"principalId\": \"$context.authorizer.principalId\",\r\n\t\"\
                    stage\": {\r\n\t    #foreach($key in $stageVariables.keySet())\r\n   \
                    \         \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \r\n            #if($foreach.hasNext),#end\r\n        #end\r\n    },\r\
                    \n\t\"ticketId\": \"$input.params('ticketId')\",\r\n\t\"statusNo\": \"\
                    $json.statusNo\",\r\n\t\"comment\": \"$json.comment\"\r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "ticketId"
                in: "path"
                required: true
                type: "string"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /totp/auth:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "TotpAuth"
                required: true
                schema:
                  $ref: "#/definitions/TotpAuth"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:totpAuth:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($allParams = $input.params())\n{\n  \"code\" : $input.json('$.code'),\n\
                    \  \"principalId\": \"$context.authorizer.principalId\"\n}\n"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /totp/register:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:totpRegister:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "{\r\n\t\"principalId\": \"$context.authorizer.principalId\"\
                    \r\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /totp/reset:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "TotpReset"
                required: true
                schema:
                  $ref: "#/definitions/TotpReset"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                400:
                  description: "400 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                401:
                  description: "401 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                403:
                  description: "403 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - customAuthorize: []
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:totpReset:${!stageVariables.env}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                  '.*"status" *: *400.*':
                    statusCode: "400"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *401.*':
                    statusCode: "401"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                  '.*"status" *: *403.*':
                    statusCode: "403"
                    responseTemplates:
                      application/json: "#set($errorObj = $util.parseJson($input.path('$.errorMessage')))\r\
                        \n{\r\n    \"status\" : $errorObj.status,\r\n    \"message\" : \"\
                        $errorObj.message\"\r\n}"
                requestTemplates:
                  application/json: "#set($json = $util.parseJson($input.body))\n{\n  \"principalId\"\
                    \ : \"$context.authorizer.principalId\",\n  \"stage\": {\n        #foreach($key\
                    \ in $stageVariables.keySet())\n            \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\
                    \n            #if($foreach.hasNext),#end\n        #end\n  },\n  \"loginId\"\
                    \ : \"$json.loginId\"\n}"
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              responses:
                200:
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    X-FRAME-OPTIONS:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.X-FRAME-OPTIONS: "'DENY'"
                      method.response.header.Access-Control-Allow-Methods: "'GET, POST, OPTIONS,\
                        \ PUT, DELETE'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          customAuthorize:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:customAuthorize:${!stageVariables.env}/invocations"
              authorizerResultTtlInSeconds: 0
              type: "token"
        definitions:
          ProfileAccounts:
            type: "object"
            required:
            - "isTotpEnabled"
            - "loginId"
            properties:
              password:
                type: "string"
                format: "password"
                pattern: "^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])[a-zA-Z0-9!-/:-@[-`{-~]{8,100}$"
              loginId:
                type: "string"
                pattern: "^[a-zA-Z0-9_\\-.@+]{3,100}$"
              isTotpEnabled:
                type: "boolean"
          Signup:
            type: "object"
            required:
            - "contractorName"
            - "department"
            - "familyName"
            - "firstName"
            - "tellNumber"
            properties:
              reservedfield10:
                type: "string"
              contractorName:
                type: "string"
              building:
                type: "string"
              familyName:
                type: "string"
              planId:
                type: "string"
              department:
                type: "string"
              reservedfield07:
                type: "string"
              reservedfield06:
                type: "string"
              reservedfield09:
                type: "string"
              address:
                type: "string"
              reservedfield08:
                type: "string"
              reservedfield01:
                type: "string"
              reservedfield03:
                type: "string"
              reservedfield02:
                type: "string"
              reservedfield05:
                type: "string"
              token:
                type: "string"
              reservedfield04:
                type: "string"
              zipcode:
                type: "string"
              firstName:
                type: "string"
              partner:
                type: "string"
              preferredDate:
                type: "string"
              tellNumber:
                type: "string"
          TotpReset:
            type: "object"
            required:
            - "loginId"
            properties:
              loginId:
                type: "string"
          ProfileServicePlan:
            type: "object"
            required:
            - "planId"
            properties:
              planId:
                type: "string"
          Login:
            type: "object"
            properties:
              password:
                type: "string"
                format: "password"
                pattern: "^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])[a-zA-Z0-9!-/:-@[-`{-~]{8,100}$"
              loginId:
                type: "string"
                pattern: "^[a-zA-Z0-9_\\-.@+]{3,100}$"
              token:
                type: "string"
              session:
                type: "string"
          Subscribe:
            type: "object"
            required:
            - "e-mail"
            - "isTrial"
            properties:
              e-mail:
                type: "string"
              isTrial:
                type: "boolean"
          InternalIPs:
            type: "object"
            required:
            - "ipString"
            properties:
              ipString:
                type: "string"
          TotpAuth:
            type: "object"
            required:
            - "code"
            properties:
              code:
                type: "string"
          Notification:
            type: "object"
            required:
            - "analysis"
            - "common"
            - "sensor"
            properties:
              emails:
                type: "array"
                items:
                  type: "string"
              common:
                type: "object"
                properties:
                  isTicketUpdated:
                    type: "boolean"
                required:
                - "isTicketUpdated"
              sensor:
                type: "object"
                properties:
                  severity:
                    type: "object"
                    properties:
                      threshold:
                        type: "integer"
                      enabled:
                        type: "boolean"
                    required:
                    - "enabled"
                    - "threshold"
                  daily:
                    type: "object"
                    properties:
                      enabled:
                        type: "boolean"
                    required:
                    - "enabled"
                  logs:
                    type: "array"
                required:
                - "daily"
                - "logs"
                - "severity"
              analysis:
                type: "object"
                properties:
                  isAnalysisFinished:
                    type: "boolean"
                required:
                - "isAnalysisFinished"
          Profile:
            type: "object"
            required:
            - "contractorName"
            - "department"
            - "e-mail"
            - "familyName"
            - "firstName"
            - "tellNumber"
            properties:
              zipcode:
                type: "string"
              firstName:
                type: "string"
              address:
                type: "string"
              familyName:
                type: "string"
              contractorName:
                type: "string"
              e-mail:
                type: "string"
              department:
                type: "string"
              tellNumber:
                type: "string"
              building:
                type: "string"
          Agreement:
            type: "object"
            required:
            - "hasNoSla"
            properties:
              hasNoSla:
                type: "boolean"
          PasswordReset:
            type: "object"
            required:
            - "loginId"
            - "token"
            properties:
              loginId:
                type: "string"
              token:
                type: "string"
          ProfileServiceSensors:
            type: "object"
            required:
            - "deviceTypeId"
            properties:
              deviceSerialIdentifier:
                type: "string"
              deviceTypeId:
                type: "string"
              deviceDisplayName:
                type: "string"
          Tickets:
            type: "object"
            required:
            - "comment"
            - "subject"
            properties:
              subject:
                type: "string"
                maxLength: 255
              comment:
                type: "string"
                maxLength: 5000
          ProfilePassword:
            type: "object"
            required:
            - "newPassword"
            properties:
              newPassword:
                type: "string"
                format: "password"
                pattern: "^(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9])[a-zA-Z0-9!-/:-@[-`{-~]{8,100}$"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_5XX:
            statusCode: 400
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\"message\":$context.error.messageString}"
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\"message\":$context.error.messageString}"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
          �N�G��������p�����[�^����уw�b�_�[�̌���:
            validateRequestParameters: true
            validateRequestBody: false


