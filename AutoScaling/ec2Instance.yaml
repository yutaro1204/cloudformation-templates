AWSTemplateFormatVersion: '2010-09-09'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '192.168.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: 'default'
      Tags:
        -
          Key: 'VPC-Name'
          Value: 'VPC-for-EC2-AutoScaling'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: 'IGW-Name'
          Value: 'IGW-for-EC2-AutoScaling'
  IGWAttacher:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn:
      - VPC
      - InternetGateway

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '192.168.0.0/20'
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        -
          Key: 'Subnet-Name'
          Value: 'SubnetA-for-EC2-AutoScaling'
    DependsOn:
      - VPC
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '192.168.16.0/20'
      AvailabilityZone: 'ap-northeast-1a'
      Tags:
        -
          Key: 'Subnet-Name'
          Value: 'SubnetB-for-EC2-AutoScaling'
    DependsOn:
      - VPC
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '192.168.32.0/20'
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        -
          Key: 'Subnet-Name'
          Value: 'SubnetC-for-EC2-AutoScaling'
    DependsOn:
      - VPC
  SubnetD:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '192.168.64.0/20'
      AvailabilityZone: 'ap-northeast-1c'
      Tags:
        -
          Key: 'Subnet-Name'
          Value: 'SubnetD-for-EC2-AutoScaling'
    DependsOn:
      - VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: 'RouteTable-Name'
          Value: 'RouteTable-for-EC2-AutoScaling'
    DependsOn:
      - VPC
  SubnetAttacherA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
    DependsOn:
      - RouteTable
      - SubnetA
  SubnetAttacherB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
    DependsOn:
      - RouteTable
      - SubnetB
  SubnetAttacherC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
    DependsOn:
      - RouteTable
      - SubnetC
  SubnetAttacherD:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetD
    DependsOn:
      - RouteTable
      - SubnetD
  RouteAttacher:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn:
      - RouteTable
      - InternetGateway

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'SampleSecurityGroup'
      GroupName: 'sampleSecurityGroup'
      SecurityGroupEgress:
        -
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'
        -
          IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIpv6: '::/0'
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        -
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: '::/0'
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        -
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIpv6: '::/0'
      VpcId: !Ref VPC
      Tags:
        -
          Key: 'SecurityGroup-Name'
          Value: 'SecurityGroup-for-EC2-AutoScaling'
    DependsOn:
      - VPC

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 'ami-0c3fd0f5d33134a76'
      InstanceType: 't2.micro'
      KeyName: 'SampleLaunchConfiguration'
      NetworkInterfaces:
        -
          AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref SubnetA
      Tags:
        -
          Key: 'EC2Instance-Name'
          Value: 'EC2Instance-for-EC2-AutoScaling'
    DependsOn:
      - SecurityGroup
      - SubnetA

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: 'SapmleAutoScaling'
      AvailabilityZones:
        - 'ap-northeast-1a'
        - 'ap-northeast-1c'
      DesiredCapacity: '2'
      InstanceId: !Ref EC2Instance
      MaxSize: '4'
      MetricsCollection:
        - Granularity: '1Minute'
          Metrics:
            - 'GroupMinSize'
            - 'GroupMaxSize'
            - 'GroupDesiredCapacity'
            - 'GroupInServiceInstances'
            - 'GroupPendingInstances'
            - 'GroupStandbyInstances'
            - 'GroupTerminatingInstances'
            - 'GroupTotalInstances'
      MinSize: '1'
      Tags:
        - Key: 'AutoScalingGroup-Name'
          Value: 'SampleAutoScaling'
          PropagateAtLaunch: 'false'
      VPCZoneIdentifier:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
        - !Ref SubnetD
    DependsOn:
      - EC2Instance
      - SubnetA
      - SubnetB
      - SubnetC
      - SubnetD
